package com.smkj.zzj.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qihe.zzj.bean.PayBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAY_BEAN".
*/
public class PayBeanDao extends AbstractDao<PayBean, Long> {

    public static final String TABLENAME = "PAY_BEAN";

    /**
     * Properties of entity PayBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dbid = new Property(0, Long.class, "dbid", true, "_id");
        public final static Property MercdName = new Property(1, String.class, "mercdName", false, "MERCD_NAME");
        public final static Property MercdWorth = new Property(2, double.class, "mercdWorth", false, "MERCD_WORTH");
        public final static Property OpenId = new Property(3, String.class, "openId", false, "OPEN_ID");
        public final static Property OrderId = new Property(4, String.class, "orderId", false, "ORDER_ID");
        public final static Property OrderNumber = new Property(5, int.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property PayTime = new Property(6, String.class, "payTime", false, "PAY_TIME");
    }


    public PayBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PayBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dbid
                "\"MERCD_NAME\" TEXT," + // 1: mercdName
                "\"MERCD_WORTH\" REAL NOT NULL ," + // 2: mercdWorth
                "\"OPEN_ID\" TEXT," + // 3: openId
                "\"ORDER_ID\" TEXT," + // 4: orderId
                "\"ORDER_NUMBER\" INTEGER NOT NULL ," + // 5: orderNumber
                "\"PAY_TIME\" TEXT);"); // 6: payTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PayBean entity) {
        stmt.clearBindings();
 
        Long dbid = entity.getDbid();
        if (dbid != null) {
            stmt.bindLong(1, dbid);
        }
 
        String mercdName = entity.getMercdName();
        if (mercdName != null) {
            stmt.bindString(2, mercdName);
        }
        stmt.bindDouble(3, entity.getMercdWorth());
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(4, openId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(5, orderId);
        }
        stmt.bindLong(6, entity.getOrderNumber());
 
        String payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindString(7, payTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PayBean entity) {
        stmt.clearBindings();
 
        Long dbid = entity.getDbid();
        if (dbid != null) {
            stmt.bindLong(1, dbid);
        }
 
        String mercdName = entity.getMercdName();
        if (mercdName != null) {
            stmt.bindString(2, mercdName);
        }
        stmt.bindDouble(3, entity.getMercdWorth());
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(4, openId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(5, orderId);
        }
        stmt.bindLong(6, entity.getOrderNumber());
 
        String payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindString(7, payTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PayBean readEntity(Cursor cursor, int offset) {
        PayBean entity = new PayBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mercdName
            cursor.getDouble(offset + 2), // mercdWorth
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // openId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderId
            cursor.getInt(offset + 5), // orderNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // payTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PayBean entity, int offset) {
        entity.setDbid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMercdName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMercdWorth(cursor.getDouble(offset + 2));
        entity.setOpenId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderNumber(cursor.getInt(offset + 5));
        entity.setPayTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PayBean entity, long rowId) {
        entity.setDbid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PayBean entity) {
        if(entity != null) {
            return entity.getDbid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PayBean entity) {
        return entity.getDbid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
